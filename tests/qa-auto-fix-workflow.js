// Script d'int√©gration pour l'analyse des captures d'√©cran et l'application des corrections automatiques
// Ce script orchestre le workflow complet de QA automatis√©

import fs from 'fs/promises';
import path from 'path';
import { exec } from 'child_process';
import util from 'util';

const execPromise = util.promisify(exec);

// Configuration
const PROJECT_ROOT = process.cwd();
const SCREENSHOTS_DIR = path.join(PROJECT_ROOT, 'backend', 'tests', 'screenshots');
const ANALYSIS_REPORT = path.join(PROJECT_ROOT, 'tests', 'screenshot-analysis-report.md');
const ANALYSIS_LOGS = path.join(PROJECT_ROOT, 'tests', 'screenshot-analysis-logs.json');
const FIX_REPORT = path.join(PROJECT_ROOT, 'tests', 'auto-fix-report.md');
const FINAL_REPORT = path.join(PROJECT_ROOT, 'tests', 'qa-workflow-report.md');

/**
 * Fonction principale qui orchestre le workflow
 */
async function runQaWorkflow() {
  console.log('üöÄ D√©marrage du workflow QA automatis√©...');
  
  try {
    // √âtape 1: V√©rifier que les captures d'√©cran existent
    await checkScreenshotsExist();
    
    // √âtape 2: Ex√©cuter l'analyse des captures d'√©cran
    await runScreenshotAnalysis();
    
    // √âtape 3: V√©rifier les r√©sultats de l'analyse
    const analysisResults = await checkAnalysisResults();
    
    // √âtape 4: Appliquer les corrections automatiques si des probl√®mes ont √©t√© d√©tect√©s
    if (analysisResults.issuesDetected > 0) {
      await runAutoFix();
      
      // √âtape 5: V√©rifier les r√©sultats des corrections
      const fixResults = await checkFixResults();
      
      // √âtape 6: G√©n√©rer un rapport final
      await generateFinalReport(analysisResults, fixResults);
    } else {
      console.log('‚úÖ Aucun probl√®me d√©tect√©, pas besoin de corrections.');
      await generateFinalReport(analysisResults, null);
    }
    
    console.log(`üìù Rapport final g√©n√©r√©: ${FINAL_REPORT}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution du workflow QA:', error);
  }
}

/**
 * V√©rifie que les captures d'√©cran existent
 */
async function checkScreenshotsExist() {
  try {
    await fs.access(SCREENSHOTS_DIR);
    
    // Compter les captures d'√©cran
    const { stdout } = await execPromise(`find ${SCREENSHOTS_DIR} -type f -name "*.png" | wc -l`);
    const count = parseInt(stdout.trim());
    
    if (count === 0) {
      throw new Error('Aucune capture d\'√©cran trouv√©e.');
    }
    
    console.log(`üì∏ ${count} captures d'√©cran trouv√©es.`);
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des captures d\'√©cran:', error);
    throw error;
  }
}

/**
 * Ex√©cute l'analyse des captures d'√©cran
 */
async function runScreenshotAnalysis() {
  console.log('üîç Ex√©cution de l\'analyse des captures d\'√©cran...');
  
  try {
    // Ex√©cuter le script d'analyse
    await execPromise('node tests/screenshot-analyzer.js');
    console.log('‚úÖ Analyse des captures d\'√©cran termin√©e.');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse des captures d\'√©cran:', error);
    throw error;
  }
}

/**
 * V√©rifie les r√©sultats de l'analyse
 * @returns {Promise<Object>} R√©sultats de l'analyse
 */
async function checkAnalysisResults() {
  try {
    // V√©rifier que le fichier de logs existe
    await fs.access(ANALYSIS_LOGS);
    
    // Charger les r√©sultats
    const analysisData = JSON.parse(await fs.readFile(ANALYSIS_LOGS, 'utf8'));
    
    console.log(`üìä Analyse termin√©e: ${analysisData.screenshotsAnalyzed} captures d'√©cran analys√©es, ${analysisData.issuesDetected} probl√®mes d√©tect√©s.`);
    
    return analysisData;
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des r√©sultats de l\'analyse:', error);
    throw error;
  }
}

/**
 * Ex√©cute les corrections automatiques
 */
async function runAutoFix() {
  console.log('üîß Application des corrections automatiques...');
  
  try {
    // Ex√©cuter le script de correction
    await execPromise('node tests/auto-fix-ui.js');
    console.log('‚úÖ Corrections automatiques termin√©es.');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'application des corrections automatiques:', error);
    throw error;
  }
}

/**
 * V√©rifie les r√©sultats des corrections
 * @returns {Promise<Object>} R√©sultats des corrections
 */
async function checkFixResults() {
  try {
    // V√©rifier que le rapport de correction existe
    await fs.access(FIX_REPORT);
    
    // Lire le contenu du rapport (pour extraire les statistiques)
    const reportContent = await fs.readFile(FIX_REPORT, 'utf8');
    
    // Extraire les statistiques de base (approche simplifi√©e)
    const fixedMatch = reportContent.match(/Probl√®mes corrig√©s\*\*:\s*(\d+)/);
    const partiallyFixedMatch = reportContent.match(/Probl√®mes partiellement corrig√©s\*\*:\s*(\d+)/);
    const notFixedMatch = reportContent.match(/Probl√®mes non corrig√©s\*\*:\s*(\d+)/);
    
    const fixResults = {
      fixed: fixedMatch ? parseInt(fixedMatch[1]) : 0,
      partiallyFixed: partiallyFixedMatch ? parseInt(partiallyFixedMatch[1]) : 0,
      notFixed: notFixedMatch ? parseInt(notFixedMatch[1]) : 0
    };
    
    console.log(`üìä Corrections termin√©es: ${fixResults.fixed} probl√®mes corrig√©s, ${fixResults.partiallyFixed} partiellement corrig√©s, ${fixResults.notFixed} non corrig√©s.`);
    
    return fixResults;
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des r√©sultats des corrections:', error);
    throw error;
  }
}

/**
 * G√©n√®re un rapport final
 * @param {Object} analysisResults - R√©sultats de l'analyse
 * @param {Object} fixResults - R√©sultats des corrections
 */
async function generateFinalReport(analysisResults, fixResults) {
  console.log('üìù G√©n√©ration du rapport final...');
  
  const now = new Date().toLocaleString();
  
  let report = `# üìä Rapport du Workflow QA Automatis√©

`;
  report += `*G√©n√©r√© le ${now}*

`;
  
  // R√©sum√©
  report += `## üìã R√©sum√©

`;
  report += `- **Captures d'√©cran analys√©es**: ${analysisResults.screenshotsAnalyzed}
`;
  report += `- **Probl√®mes d√©tect√©s**: ${analysisResults.issuesDetected}
`;
  
  if (fixResults) {
    report += `- **Probl√®mes corrig√©s**: ${fixResults.fixed}
`;
    report += `- **Probl√®mes partiellement corrig√©s**: ${fixResults.partiallyFixed}
`;
    report += `- **Probl√®mes non corrig√©s**: ${fixResults.notFixed}
`;
    
    // Taux de r√©ussite
    const totalIssues = analysisResults.issuesDetected;
    const fixRate = totalIssues > 0 ? Math.round((fixResults.fixed / totalIssues) * 100) : 0;
    const partialFixRate = totalIssues > 0 ? Math.round((fixResults.partiallyFixed / totalIssues) * 100) : 0;
    
    report += `- **Taux de correction compl√®te**: ${fixRate}%
`;
    report += `- **Taux de correction partielle**: ${partialFixRate}%
`;
  }
  
  // Liens vers les rapports d√©taill√©s
  report += `
## üìÑ Rapports D√©taill√©s

`;
  report += `- [Rapport d'analyse des captures d'√©cran](${path.relative(PROJECT_ROOT, ANALYSIS_REPORT)})
`;
  
  if (fixResults) {
    report += `- [Rapport des corrections automatiques](${path.relative(PROJECT_ROOT, FIX_REPORT)})
`;
  }
  
  // √âtapes suivantes
  report += `
## üîú √âtapes Suivantes

`;
  
  if (fixResults && (fixResults.partiallyFixed > 0 || fixResults.notFixed > 0)) {
    report += `### Probl√®mes n√©cessitant une intervention manuelle

`;
    report += `${fixResults.partiallyFixed + fixResults.notFixed} probl√®me(s) n'ont pas √©t√© enti√®rement corrig√©s automatiquement et n√©cessitent une intervention manuelle. Consultez le rapport d'analyse pour plus de d√©tails.

`;
  }
  
  report += `### Recommandations

`;
  report += `- V√©rifier visuellement les corrections appliqu√©es
`;
  report += `- Ex√©cuter des tests manuels sur les pages corrig√©es
`;
  report += `- Mettre √† jour les guidelines de design pour √©viter ces probl√®mes √† l'avenir
`;
  
  // Pied de page
  report += `\n---\n\n*Rapport g√©n√©r√© automatiquement par le workflow QA automatis√©*`;
  
  // Sauvegarder le rapport
  await fs.writeFile(FINAL_REPORT, report);
}

// Ex√©cuter le workflow
runQaWorkflow();