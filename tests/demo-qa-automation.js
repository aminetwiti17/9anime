// Script de d√©monstration du syst√®me d'analyse et de correction automatique des probl√®mes UI
// Ce script montre comment utiliser les diff√©rents composants du syst√®me

import fs from 'fs/promises';
import path from 'path';
import { exec } from 'child_process';
import util from 'util';

const execPromise = util.promisify(exec);

// Configuration
const PROJECT_ROOT = process.cwd();
const SCREENSHOTS_DIR = path.join(PROJECT_ROOT, 'backend', 'tests', 'screenshots');

/**
 * Fonction principale de d√©monstration
 */
async function runDemo() {
  console.log('üöÄ D√©marrage de la d√©monstration du syst√®me d\'analyse et de correction automatique...');
  console.log('üìã Cette d√©monstration va vous montrer comment utiliser les diff√©rents composants du syst√®me.');
  
  try {
    // √âtape 1: V√©rifier que les captures d'√©cran existent
    await checkScreenshots();
    
    // √âtape 2: Pr√©senter les options disponibles
    await presentOptions();
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la d√©monstration:', error);
  }
}

/**
 * V√©rifie que les captures d'√©cran existent
 */
async function checkScreenshots() {
  try {
    await fs.access(SCREENSHOTS_DIR);
    
    // Compter les captures d'√©cran
    const { stdout } = await execPromise(`find ${SCREENSHOTS_DIR} -type f -name "*.png" | wc -l`);
    const count = parseInt(stdout.trim());
    
    if (count === 0) {
      console.log('‚ö†Ô∏è Aucune capture d\'√©cran trouv√©e. Veuillez d\'abord g√©n√©rer des captures d\'√©cran.');
      console.log('üí° Vous pouvez utiliser les scripts de test existants pour g√©n√©rer des captures d\'√©cran.');
      process.exit(1);
    }
    
    console.log(`üì∏ ${count} captures d'√©cran trouv√©es dans ${SCREENSHOTS_DIR}.`);
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des captures d\'√©cran:', error);
    console.log('üí° Assurez-vous que le r√©pertoire des captures d\'√©cran existe et est accessible.');
    throw error;
  }
}

/**
 * Pr√©sente les options disponibles
 */
async function presentOptions() {
  console.log('\nüìã Options disponibles:');
  console.log('1Ô∏è‚É£  Analyser les captures d\'√©cran uniquement');
  console.log('2Ô∏è‚É£  Appliquer les corrections automatiques uniquement');
  console.log('3Ô∏è‚É£  Ex√©cuter le workflow complet (analyse + corrections)');
  console.log('4Ô∏è‚É£  Afficher l\'aide');
  console.log('5Ô∏è‚É£  Quitter');
  
  // Dans un environnement interactif, on demanderait √† l'utilisateur de choisir une option
  // Mais comme ce script est ex√©cut√© en mode non interactif, on affiche simplement les commandes √† utiliser
  
  console.log('\nüí° Pour ex√©cuter une option, utilisez les commandes suivantes:');
  console.log('\nüìä Pour analyser les captures d\'√©cran uniquement:');
  console.log('   node tests/screenshot-analyzer.js');
  
  console.log('\nüîß Pour appliquer les corrections automatiques uniquement:');
  console.log('   node tests/auto-fix-ui.js');
  
  console.log('\nüöÄ Pour ex√©cuter le workflow complet (analyse + corrections):');
  console.log('   node tests/qa-auto-fix-workflow.js');
  
  console.log('\nüìö Pour plus d\'informations, consultez la documentation:');
  console.log('   cat tests/README-QA-AUTOMATION.md');
  
  console.log('\n‚ú® Exemple d\'utilisation du workflow complet:');
  console.log('```bash');
  console.log('# G√©n√©rer des captures d\'√©cran (si n√©cessaire)');
  console.log('node tests/run-tests.js');
  console.log('');
  console.log('# Ex√©cuter le workflow d\'analyse et de correction');
  console.log('node tests/qa-auto-fix-workflow.js');
  console.log('');
  console.log('# Consulter le rapport final');
  console.log('cat tests/qa-workflow-report.md');
  console.log('```');
}

// Ex√©cuter la d√©monstration
runDemo();